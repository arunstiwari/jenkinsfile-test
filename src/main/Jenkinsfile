pipeline{
    agent none
    parameters{
            string(name: 'IS_FILE', defaultValue: 'v1045')
        }
    stages {
       stage('Checkout'){
           steps {
              echo "Branch : ${BRANCH}"
               withCredentials([usernamePassword(credentialsId: "WEB_USER", usernameVariable: "bitbucket_user", passwordVariable: "bitbucket_paas")]){
                sh '''
                    fBranchName = Fast-Track
                    if([ ${BRANCH} = "Dev" -o ${BRANCH} = "Fast-Track"])
                        then
                           ls "Branch Name ${BRANCH}"
                    else
                        echo "Not pulling from branch"
                    fi
                '''
               }

           }
       }
       stage('Unit Test'){
           steps {
                  echo 'Executing Unit Tests ${params.IS_FILE}'
          }
          post {
            success {
                echo 'Unit Test ran successfully'
            }
          }
       }
    stage('Static Code Analysis'){
          steps {
             echo 'Executing Static Code Analysis'
             int status = sh(returnStatus: true, script: './build.sh --release')

             if(status > 0) {
                currentBuild.result = 'UNSTABLE'
             }else {
                def result = sh(returnStdout: true, script: './processTestResults.sh --platform debian')
                 echo "result: ${result}"
                 if (!result.endsWith('SUCCESS')) {
                     currentBuild.result = 'FAILURE'
                     error 'Build failed!'
                 }
             }

         }
         post {
             success {
                 echo 'Static Code analysis completed successfully'
             }
             failure {
                echo 'Static Code analysis failed'
             }
             unstable {
                echo 'Static Code build is unstable'
             }
        }
      }
      stage('Packaging'){
        steps {
           echo 'Packaging it as a jar'
           sh '''
            mvn clean package
           '''
       }
       post {
           success {
               echo 'Packaging as jar was done successfully'
           }
           failure {
               echo 'Packaging failed'
           }
         }
      }
    stage('Shell Execution'){
        steps {
           echo 'Executing shell commands'
           sh '''
           mvn clean install
           cp abc.txt cde.txt
           mv abed.csv xyz.csv
           '''

       }
       post {
           success {
               echo 'Shell Command executed successfully'
           }
           failure {
               echo 'Shell command execution failed'
           }
         }
      }
    }
    post {
        always {
            echo 'Commit Stage Pipeline ran successfully'
        }
      }
}